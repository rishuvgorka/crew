# -*- coding: utf-8 -*-
"""42Trains_InitialPrepRocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UrHxZX8NN6h2Qm5t8ChaA0OqrZPASrji
"""

import numpy as np
import pandas as pd
import datetime
import argparse

# --------------------------------------------- PARSE Command Line Input -----------------------------------------------
parser = argparse.ArgumentParser()
parser.add_argument("inputFileLocation", type=str, help="Provide the location of the input file.")
parser.add_argument("outputFileLocation", type=str, help="Provide the location of the output file."
)

args = parser.parse_args()
inputFile = args.inputFileLocation
outputFileLocation = args.outputFileLocation

df = pd.read_excel(f"{inputFile}",sheet_name="TIME TABLE 07SA017_12052025",header = None)
df.drop([3,48,49], inplace=True)
df = df.reset_index(drop=True)
rakes = []
for i in range(1,df.shape[1]):
  rakes.append(df.iloc[0,i])

rakes = set(rakes)

# Convert the set back to a list
rakes = list(rakes)

# Print the unique elements
#print(rakes)

def hhmm2mins(hhmm):
    hrs = hhmm[:2]
    min = hhmm[-2:]
    mins = int(hrs)*60 + int(min)
    return mins

def timeDiff(x, y):
  return hhmm2mins(y) - hhmm2mins(x)

RakeNum = []
startStn = []
startTime = []
endStn = []
endTime = []
direction = []
serviceTime = []
category = []
inductingRakes = []
stablingRakes = []
# uniqueID = []
reqIndexofStn = [5,10,31,33,39,42]
reqIndexofStn1 = [47,50,56,58,79,84]


for i in range(1,df.shape[1]):
  if not pd.isna(df.iloc[2,i]):
    inductingRakes.append(df.iloc[0,i])
    RakeNum.append(df.iloc[0,i])
    if 'DEPOT DEP' in df.iloc[1,i]: 
      startStn.append(df.iloc[4,i])
    else: startStn.append(df.iloc[1,i])
    startTime.append(df.iloc[2,i].strftime('%H:%M'))
    for j in reqIndexofStn:
      flag = False
      if not pd.isna(df.iloc[j,i]) and type(df.iloc[j,i]) != str:
        endStn.append(df.iloc[j,0])
        endTime.append(df.iloc[j,i].strftime('%H:%M'))
        if j <= 42:
          direction.append("DN")
          # uniqueID.append(df.iloc[92,i]+"D")
        else:
          direction.append("UP")
          # uniqueID.append(df.iloc[92,i]+"U")
        flag = True
        req = j
        break
    for j in reqIndexofStn1:
      if not flag:
        if not pd.isna(df.iloc[j,i]) and type(df.iloc[j,i]) != str:
          endStn.append(df.iloc[j,0])
          endTime.append(df.iloc[j,i].strftime('%H:%M'))
          if j <= 42:
            direction.append("DN")
            # uniqueID.append(df.iloc[92,i]+"D")
          else: 
            direction.append("UP")
            # uniqueID.append(df.iloc[92,i]+"U")
          req = j
          break

    if flag: list1 = reqIndexofStn
    elif not flag: list1 = reqIndexofStn1
    else: print("error1",df.iloc[0,i])

    for j in list1:
      if j >= req:
        if j != list1[-1]:
          k = list1.index(j)
          if not pd.isna(df.iloc[j,i]) and type(df.iloc[j,i]) != str and type(df.iloc[j,i]) != int and not pd.isna(df.iloc[list1[k+1],i]):
            RakeNum.append(df.iloc[0,i])
            startStn.append(df.iloc[j,0])
            startTime.append(df.iloc[j,i].strftime('%H:%M'))
            endStn.append(df.iloc[list1[k+1],0])
            endTime.append(df.iloc[list1[k+1],i].strftime('%H:%M'))
            if j <= 42: 
              direction.append("DN")
              # uniqueID.append(df.iloc[92,i]+"D")
            else: 
              direction.append("UP")
              # uniqueID.append(df.iloc[92,i]+"U")

    if flag:
      for j in reqIndexofStn1:
        if j != reqIndexofStn1[-1]:
          k = reqIndexofStn1.index(j)
          if not pd.isna(df.iloc[j,i]) and type(df.iloc[j,i]) != str and type(df.iloc[j,i]) != int and not pd.isna(df.iloc[reqIndexofStn1[k+1],i]):
              RakeNum.append(df.iloc[0,i])
              startStn.append(df.iloc[j,0])
              startTime.append(df.iloc[j,i].strftime('%H:%M'))
              endStn.append(df.iloc[reqIndexofStn1[k+1],0])
              endTime.append(df.iloc[reqIndexofStn1[k+1],i].strftime('%H:%M'))
              if j <= 42: 
                direction.append("DN")
                # uniqueID.append(df.iloc[92,i]+"D")
              else: 
                direction.append("UP")
                # uniqueID.append(df.iloc[92,i]+"U")
  else:
    for j in range(5,df.shape[0]):
      flag2 = False
      if not pd.isna(df.iloc[j,i]) and type(df.iloc[j,i]) != str and type(df.iloc[j,i]) != int:
        RakeNum.append(df.iloc[0,i])
        startStn.append(df.iloc[j,0])
        startTime.append(df.iloc[j,i].strftime('%H:%M'))
        if j < 42:
          dnservice = True
          list1 = reqIndexofStn
        else:
          dnservice = False
          list1 = reqIndexofStn1
        for k in list1:
          if not pd.isna(df.iloc[k,i]) and type(df.iloc[k,i]) != str and type(df.iloc[k,i]) != int:
            endStn.append(df.iloc[k,0])
            endTime.append(df.iloc[k,i].strftime('%H:%M'))
            req = k
            flag2 = True
            if j <= 42: 
              direction.append("DN")
              # uniqueID.append(df.iloc[92,i]+"D")
            else: 
              direction.append("UP")
              # uniqueID.append(df.iloc[92,i]+"U")
            break
        if flag2: break
        else: print("error2",df.iloc[0,i],df.iloc[6,i])
    for j in list1:
      if j >= req:
        if not pd.isna(df.iloc[j,i]) and type(df.iloc[j,i]) != str and type(df.iloc[j,i]) != int:
          if j != list1[-1]:
            RakeNum.append(df.iloc[0,i])
            startStn.append(df.iloc[j,0])
            startTime.append(df.iloc[j,i].strftime('%H:%M'))
            k = list1.index(j)
            if not pd.isna(df.iloc[list1[k+1],i]) and type(df.iloc[list1[k+1],i]) != str:
              endStn.append(df.iloc[list1[k+1],0])
              endTime.append(df.iloc[list1[k+1],i].strftime('%H:%M'))
              if j <= 42:
                direction.append("DN")
                # uniqueID.append(df.iloc[92,i]+"D")
              else: 
                direction.append("UP")
                # uniqueID.append(df.iloc[92,i]+"U")
            else:
              for j in range(list1[k+1],list1[k]-1,-1):
                flag3 = False
                if not pd.isna(df.iloc[j,i]) and type(df.iloc[j,i]) != str:
                  endStn.append(df.iloc[j,0])
                  endTime.append(df.iloc[j,i].strftime('%H:%M'))
                  if j <= 42: 
                    direction.append("DN")
                    # uniqueID.append(df.iloc[92,i]+"D")
                  else: 
                    direction.append("UP")
                    # uniqueID.append(df.iloc[92,i]+"U")
                  flag3 = True
                  break
              if not flag3: print("error3", df.iloc[0,i])

    if dnservice:
      for j in reqIndexofStn1:
        if j != reqIndexofStn1[-1]:
          if not pd.isna(df.iloc[j,i]) and type(df.iloc[j,i]) != str and type(df.iloc[j,i]) != int:
            RakeNum.append(df.iloc[0,i])
            startStn.append(df.iloc[j,0])
            startTime.append(df.iloc[j,i].strftime('%H:%M'))
            k = reqIndexofStn1.index(j)
            if  not pd.isna(df.iloc[reqIndexofStn1[k+1],i]) and type(df.iloc[reqIndexofStn1[k+1],i]) != str:
              endStn.append(df.iloc[reqIndexofStn1[k+1],0])
              endTime.append(df.iloc[reqIndexofStn1[k+1],i].strftime('%H:%M'))
              if j <= 42: 
                direction.append("DN")
                # uniqueID.append(df.iloc[92,i]+"D")
              else: 
                direction.append("UP")
                # uniqueID.append(df.iloc[92,i]+"D")
            else:
              entryFlag = False
              if k != len(reqIndexofStn1):
                for x in range(k+1,len(reqIndexofStn1)):
                  if pd.isna(df.iloc[reqIndexofStn1[x],i]):
                    continue
                  else:
                    endStn.append(df.iloc[reqIndexofStn1[x],0])
                    endTime.append(df.iloc[reqIndexofStn1[x],i].strftime('%H:%M'))
                    if j <= 42:
                      direction.append("DN")
                    else:
                      direction.append("UP")
                    entryFlag = True
                    break
                if entryFlag:
                  continue
              for j in range(reqIndexofStn1[k+1],reqIndexofStn1[k]-1,-1):
                flag3 = False
                if not pd.isna(df.iloc[j,i]) and type(df.iloc[j,i]) != str:
                  endStn.append(df.iloc[j,0])
                  endTime.append(df.iloc[j,i].strftime('%H:%M'))
                  if j <= 42:
                    direction.append("DN")
                    # uniqueID.append(df.iloc[92,i]+"D")
                  else: 
                    direction.append("UP")
                    # uniqueID.append(df.iloc[92,i]+"D")
                  flag3 = True
                  break
            

  if not pd.isna(df.iloc[86,i]) and type(df.iloc[86,i]) != str:# and 'SVVR' not in df.iloc[85,i]:
    RakeNum.append(df.iloc[0,i])
    startStn.append(endStn[-1])
    startTime.append(endTime[-1])
    endStn.append(df.iloc[85,i])
    endTime.append(df.iloc[86,i].strftime('%H:%M'))
    direction.append('UP')
    # uniqueID.append(df.iloc[92,i]+"U")




print(len(RakeNum),len(startStn),len(startTime),len(endStn),len(endTime)) #, len(uniqueID))

services = pd.DataFrame(list(zip(RakeNum,startStn,startTime,endStn,endTime,direction)),#uniqueID)),
               columns =['Rake Num','Start Station','Start Time','End Station','End Time','Direction'])#,'Uniques ID'])

#services = services.sort_values(by=['Start Time'])
services

rowsRemoved = []
for i in range(services.shape[0]):
  if services.iloc[i,1] == services.iloc[i,3] and services.iloc[i,2] == services.iloc[i,4]:
    rowsRemoved.append(i)

services = services.drop(rowsRemoved)

services

# services.iloc[10,1]

serviceTime = []
for i in range(services.shape[0]):
  if services.iloc[i,1] == "PVGW" or services.iloc[i,1] == "KKDA":
    services.iloc[i,1] = services.iloc[i,1] + " " +services.iloc[i,5]
  if services.iloc[i,3] == "PVGW" or services.iloc[i,3] == "KKDA":
    services.iloc[i,3] = services.iloc[i,3] + " " +services.iloc[i,5]
  if services.iloc[i,2][:2] == '00':
    services.iloc[i,2] = '24' + services.iloc[i,2][2:]
  elif services.iloc[i,2][:2] == '01':
    services.iloc[i,2] = '25' + services.iloc[i,2][2:]

  if services.iloc[i,4][:2] == '00':
    services.iloc[i,4] = '24' + services.iloc[i,4][2:]
  elif services.iloc[i,4][:2] == '01':
    services.iloc[i,4] = '25' + services.iloc[i,4][2:]

for i in range(services.shape[0]):
  serviceTime.append(timeDiff(services.iloc[i,2],services.iloc[i,4]))

services["Service Time"] = serviceTime
services = services.sort_values(by='Start Time')


services.to_csv(f"{outputFileLocation}InitialServices.csv")

